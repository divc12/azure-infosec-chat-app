{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\divc1\\\\Downloads\\\\demosb\\\\sb-agentic-ai-security-agents\\\\src\\\\contexts\\\\ChatContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// contents.ChatContext.tsx\nimport React, { createContext, useContext, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatContext = /*#__PURE__*/createContext(undefined);\nexport const ChatProvider = ({\n  children\n}) => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const sendMessage = async text => {\n    if (!text.trim() || isProcessing) return;\n\n    // 1. Add the user message\n    const userMsg = {\n      id: Date.now(),\n      text: text.trim(),\n      sender: 'user'\n    };\n    setMessages(prev => [...prev, userMsg]);\n\n    // 2. Set processing = true\n    setIsProcessing(true);\n\n    // 3. Call backend via fetch\n    try {\n      const response = await fetch('/api/chat', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          message: text.trim()\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`Server responded ${response.status}`);\n      }\n      const data = await response.json();\n      // Assume the backend returns { reply: string }\n      const botMsg = {\n        id: Date.now() + 1,\n        text: data.reply || 'Error: Empty response',\n        sender: 'bot'\n      };\n      setMessages(prev => [...prev, botMsg]);\n    } catch (err) {\n      // If fetch fails, push an error‐style bot message\n      const errorMsg = {\n        id: Date.now() + 2,\n        text: '⚠️ Sorry, something went wrong.',\n        sender: 'bot'\n      };\n      setMessages(prev => [...prev, errorMsg]);\n      console.error('Chat fetch error:', err);\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(ChatContext.Provider, {\n    value: {\n      messages,\n      isProcessing,\n      sendMessage\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatProvider, \"t6FzKePphWWxYT4nQiePbEcijS0=\");\n_c = ChatProvider;\nexport const useChat = () => {\n  _s2();\n  const ctx = useContext(ChatContext);\n  if (!ctx) {\n    throw new Error('useChat must be used within a ChatProvider');\n  }\n  return ctx;\n};\n_s2(useChat, \"/dMy7t63NXD4eYACoT93CePwGrg=\");\nvar _c;\n$RefreshReg$(_c, \"ChatProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","jsxDEV","_jsxDEV","ChatContext","undefined","ChatProvider","children","_s","messages","setMessages","isProcessing","setIsProcessing","sendMessage","text","trim","userMsg","id","Date","now","sender","prev","response","fetch","method","headers","body","JSON","stringify","message","ok","Error","status","data","json","botMsg","reply","err","errorMsg","console","error","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useChat","_s2","ctx","$RefreshReg$"],"sources":["C:/Users/divc1/Downloads/demosb/sb-agentic-ai-security-agents/src/contexts/ChatContext.tsx"],"sourcesContent":["// contents.ChatContext.tsx\r\nimport React, { createContext, useContext, useState, ReactNode } from 'react';\r\n\r\nexport interface Message {\r\n  id: number;\r\n  text: string;\r\n  sender: 'user' | 'bot';\r\n}\r\n\r\ninterface ChatContextValue {\r\n  messages: Message[];\r\n  isProcessing: boolean;\r\n  sendMessage: (text: string) => Promise<void>;\r\n}\r\n\r\nconst ChatContext = createContext<ChatContextValue | undefined>(undefined);\r\n\r\nexport const ChatProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\r\n  const [messages, setMessages] = useState<Message[]>([]);\r\n  const [isProcessing, setIsProcessing] = useState<boolean>(false);\r\n\r\n  const sendMessage = async (text: string) => {\r\n    if (!text.trim() || isProcessing) return;\r\n\r\n    // 1. Add the user message\r\n    const userMsg: Message = { id: Date.now(), text: text.trim(), sender: 'user' };\r\n    setMessages(prev => [...prev, userMsg]);\r\n\r\n    // 2. Set processing = true\r\n    setIsProcessing(true);\r\n\r\n    // 3. Call backend via fetch\r\n    try {\r\n      const response = await fetch('/api/chat', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ message: text.trim() }),\r\n      });\r\n      if (!response.ok) {\r\n        throw new Error(`Server responded ${response.status}`);\r\n      }\r\n      const data = await response.json(); \r\n      // Assume the backend returns { reply: string }\r\n      const botMsg: Message = {\r\n        id: Date.now() + 1,\r\n        text: data.reply || 'Error: Empty response',\r\n        sender: 'bot',\r\n      };\r\n      setMessages(prev => [...prev, botMsg]);\r\n    } catch (err) {\r\n      // If fetch fails, push an error‐style bot message\r\n      const errorMsg: Message = {\r\n        id: Date.now() + 2,\r\n        text: '⚠️ Sorry, something went wrong.',\r\n        sender: 'bot',\r\n      };\r\n      setMessages(prev => [...prev, errorMsg]);\r\n      console.error('Chat fetch error:', err);\r\n    } finally {\r\n      setIsProcessing(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ChatContext.Provider value={{ messages, isProcessing, sendMessage }}>\r\n      {children}\r\n    </ChatContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useChat = (): ChatContextValue => {\r\n  const ctx = useContext(ChatContext);\r\n  if (!ctx) {\r\n    throw new Error('useChat must be used within a ChatProvider');\r\n  }\r\n  return ctx;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}