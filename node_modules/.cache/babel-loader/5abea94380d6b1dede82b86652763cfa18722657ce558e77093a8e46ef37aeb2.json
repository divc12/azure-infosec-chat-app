{"ast":null,"code":"import { __extends } from \"tslib\";\nimport * as React from 'react';\nimport { Customizations } from './Customizations';\nimport { CustomizerContext } from './CustomizerContext';\nimport { mergeCustomizations } from './mergeCustomizations';\n/**\n * The Customizer component allows for default props to be mixed into components which\n * are decorated with the customizable() decorator, or use the styled HOC. This enables\n * injection scenarios like:\n *\n * 1. render svg icons instead of the icon font within all buttons\n * 2. inject a custom theme object into a component\n *\n * Props are provided via the settings prop which should be one of the following:\n * - A json map which contains 1 or more name/value pairs representing injectable props.\n * - A function that receives the current settings and returns the new ones that apply to the scope\n *\n * @public\n *\n * @deprecated This component is deprecated for purpose of applying theme to components\n * as of `@fluentui/react` version 8. Use `ThemeProvider` for applying theme instead.\n */\nvar Customizer = /** @class */function (_super) {\n  __extends(Customizer, _super);\n  function Customizer() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this._onCustomizationChange = function () {\n      return _this.forceUpdate();\n    };\n    return _this;\n  }\n  Customizer.prototype.componentDidMount = function () {\n    Customizations.observe(this._onCustomizationChange);\n  };\n  Customizer.prototype.componentWillUnmount = function () {\n    Customizations.unobserve(this._onCustomizationChange);\n  };\n  Customizer.prototype.render = function () {\n    var _this = this;\n    var contextTransform = this.props.contextTransform;\n    return React.createElement(CustomizerContext.Consumer, null, function (parentContext) {\n      var newContext = mergeCustomizations(_this.props, parentContext);\n      if (contextTransform) {\n        newContext = contextTransform(newContext);\n      }\n      return React.createElement(CustomizerContext.Provider, {\n        value: newContext\n      }, _this.props.children);\n    });\n  };\n  return Customizer;\n}(React.Component);\nexport { Customizer };","map":{"version":3,"names":["React","Customizations","CustomizerContext","mergeCustomizations","Customizer","_super","__extends","_this","_onCustomizationChange","forceUpdate","prototype","componentDidMount","observe","componentWillUnmount","unobserve","render","contextTransform","props","createElement","Consumer","parentContext","newContext","Provider","value","children","Component"],"sources":["C:\\Users\\divc1\\Downloads\\demosb\\sb-agentic-ai-security-agents\\node_modules\\@fluentui\\utilities\\lib\\src\\customizations\\Customizer.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Customizations } from './Customizations';\nimport { CustomizerContext } from './CustomizerContext';\nimport { mergeCustomizations } from './mergeCustomizations';\nimport type { ICustomizerContext } from './CustomizerContext';\nimport type { ICustomizerProps } from './Customizer.types';\n\n/**\n * The Customizer component allows for default props to be mixed into components which\n * are decorated with the customizable() decorator, or use the styled HOC. This enables\n * injection scenarios like:\n *\n * 1. render svg icons instead of the icon font within all buttons\n * 2. inject a custom theme object into a component\n *\n * Props are provided via the settings prop which should be one of the following:\n * - A json map which contains 1 or more name/value pairs representing injectable props.\n * - A function that receives the current settings and returns the new ones that apply to the scope\n *\n * @public\n *\n * @deprecated This component is deprecated for purpose of applying theme to components\n * as of `@fluentui/react` version 8. Use `ThemeProvider` for applying theme instead.\n */\nexport class Customizer extends React.Component<ICustomizerProps> {\n  public componentDidMount(): void {\n    Customizations.observe(this._onCustomizationChange);\n  }\n\n  public componentWillUnmount(): void {\n    Customizations.unobserve(this._onCustomizationChange);\n  }\n\n  public render(): React.ReactElement<{}> {\n    const { contextTransform } = this.props;\n    return (\n      <CustomizerContext.Consumer>\n        {(parentContext: ICustomizerContext) => {\n          let newContext = mergeCustomizations(this.props, parentContext);\n\n          if (contextTransform) {\n            newContext = contextTransform(newContext);\n          }\n\n          return <CustomizerContext.Provider value={newContext}>{this.props.children}</CustomizerContext.Provider>;\n        }}\n      </CustomizerContext.Consumer>\n    );\n  }\n\n  private _onCustomizationChange = () => this.forceUpdate();\n}\n"],"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,cAAc,QAAQ,kBAAkB;AACjD,SAASC,iBAAiB,QAAQ,qBAAqB;AACvD,SAASC,mBAAmB,QAAQ,uBAAuB;AAI3D;;;;;;;;;;;;;;;;;AAiBA,IAAAC,UAAA,0BAAAC,MAAA;EAAgCC,SAAA,CAAAF,UAAA,EAAAC,MAAA;EAAhC,SAAAD,WAAA;;IA0BUG,KAAA,CAAAC,sBAAsB,GAAG;MAAM,OAAAD,KAAI,CAACE,WAAW,EAAE;IAAlB,CAAkB;;EAC3D;EA1BSL,UAAA,CAAAM,SAAA,CAAAC,iBAAiB,GAAxB;IACEV,cAAc,CAACW,OAAO,CAAC,IAAI,CAACJ,sBAAsB,CAAC;EACrD,CAAC;EAEMJ,UAAA,CAAAM,SAAA,CAAAG,oBAAoB,GAA3B;IACEZ,cAAc,CAACa,SAAS,CAAC,IAAI,CAACN,sBAAsB,CAAC;EACvD,CAAC;EAEMJ,UAAA,CAAAM,SAAA,CAAAK,MAAM,GAAb;IAAA,IAAAR,KAAA;IACU,IAAAS,gBAAgB,GAAK,IAAI,CAACC,KAAK,CAAAD,gBAAf;IACxB,OACEhB,KAAA,CAAAkB,aAAA,CAAChB,iBAAiB,CAACiB,QAAQ,QACxB,UAACC,aAAiC;MACjC,IAAIC,UAAU,GAAGlB,mBAAmB,CAACI,KAAI,CAACU,KAAK,EAAEG,aAAa,CAAC;MAE/D,IAAIJ,gBAAgB,EAAE;QACpBK,UAAU,GAAGL,gBAAgB,CAACK,UAAU,CAAC;MAC3C;MAEA,OAAOrB,KAAA,CAAAkB,aAAA,CAAChB,iBAAiB,CAACoB,QAAQ;QAACC,KAAK,EAAEF;MAAU,GAAGd,KAAI,CAACU,KAAK,CAACO,QAAQ,CAA8B;IAC1G,CAAC,CAC0B;EAEjC,CAAC;EAGH,OAAApB,UAAC;AAAD,CAAC,CA3B+BJ,KAAK,CAACyB,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}