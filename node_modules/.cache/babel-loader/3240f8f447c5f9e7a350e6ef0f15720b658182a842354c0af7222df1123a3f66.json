{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\divc1\\\\Downloads\\\\demosb\\\\sb-agentic-ai-security-agents\\\\src\\\\contexts\\\\ChatContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// src/contexts/ChatContext.tsx\nimport React, { createContext, useContext, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatContext = /*#__PURE__*/createContext(undefined);\nexport const ChatProvider = ({\n  children\n}) => {\n  _s();\n  // conversations[\"1\"] = Message[] for /app1, conversations[\"2\"] = Message[] for /app2, etc.\n  const [conversations, setConversations] = useState({});\n  // processing[\"1\"] = true if /app1 is waiting for a reply, etc.\n  const [processing, setProcessing] = useState({});\n  const sendMessage = async (appId, text) => {\n    // If that appId is already processing, do nothing\n    if (processing[appId]) return;\n\n    // 1. Append the user message onto that app's conversation\n    const userMsg = {\n      id: Date.now(),\n      text: text.trim(),\n      sender: 'user'\n    };\n    setConversations(prev => {\n      var _prev$appId;\n      const prevMsgs = (_prev$appId = prev[appId]) !== null && _prev$appId !== void 0 ? _prev$appId : [];\n      return {\n        ...prev,\n        [appId]: [...prevMsgs, userMsg]\n      };\n    });\n\n    // 2. Mark that appId as processing\n    setProcessing(prev => ({\n      ...prev,\n      [appId]: true\n    }));\n\n    // 3. Fire off the POST to /api/chat\n    try {\n      const response = await fetch('/api/chat', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          appId,\n          message: text.trim()\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`Server responded ${response.status}`);\n      }\n      const data = await response.json();\n      // assume backend returns { reply: string }\n      const botMsg = {\n        id: Date.now() + 1,\n        text: data.reply || 'Error: Empty response',\n        sender: 'bot'\n      };\n      // Append botMsg onto that same conversation\n      setConversations(prev => {\n        var _prev$appId2;\n        const prevMsgs = (_prev$appId2 = prev[appId]) !== null && _prev$appId2 !== void 0 ? _prev$appId2 : [];\n        return {\n          ...prev,\n          [appId]: [...prevMsgs, botMsg]\n        };\n      });\n    } catch (err) {\n      const errorMsg = {\n        id: Date.now() + 2,\n        text: '⚠️ Sorry, something went wrong.',\n        sender: 'bot'\n      };\n      setConversations(prev => {\n        var _prev$appId3;\n        const prevMsgs = (_prev$appId3 = prev[appId]) !== null && _prev$appId3 !== void 0 ? _prev$appId3 : [];\n        return {\n          ...prev,\n          [appId]: [...prevMsgs, errorMsg]\n        };\n      });\n      console.error('Chat fetch error for appId', appId, err);\n    } finally {\n      // 4. Clear processing for that appId\n      setProcessing(prev => ({\n        ...prev,\n        [appId]: false\n      }));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(ChatContext.Provider, {\n    value: {\n      conversations,\n      processing,\n      sendMessage\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n};\n\n/**\r\n * useChat(appId) → { messages, isProcessing, sendMessage }\r\n *   • messages: Message[] for this appId (or [] if none yet)\r\n *   • isProcessing: boolean for this appId\r\n *   • sendMessage(text) internally calls context.sendMessage(appId, text)\r\n */\n_s(ChatProvider, \"7OeZcHI5JaHoaBhT+lMJpGA3ohA=\");\n_c = ChatProvider;\nexport const useChat = appId => {\n  _s2();\n  var _conversations$appId, _processing$appId;\n  const ctx = useContext(ChatContext);\n  if (!ctx) {\n    throw new Error('useChat must be used within a ChatProvider');\n  }\n  const {\n    conversations,\n    processing,\n    sendMessage: rawSend\n  } = ctx;\n  return {\n    messages: (_conversations$appId = conversations[appId]) !== null && _conversations$appId !== void 0 ? _conversations$appId : [],\n    isProcessing: (_processing$appId = processing[appId]) !== null && _processing$appId !== void 0 ? _processing$appId : false,\n    sendMessage: text => rawSend(appId, text)\n  };\n};\n_s2(useChat, \"/dMy7t63NXD4eYACoT93CePwGrg=\");\nvar _c;\n$RefreshReg$(_c, \"ChatProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","jsxDEV","_jsxDEV","ChatContext","undefined","ChatProvider","children","_s","conversations","setConversations","processing","setProcessing","sendMessage","appId","text","userMsg","id","Date","now","trim","sender","prev","_prev$appId","prevMsgs","response","fetch","method","headers","body","JSON","stringify","message","ok","Error","status","data","json","botMsg","reply","_prev$appId2","err","errorMsg","_prev$appId3","console","error","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useChat","_s2","_conversations$appId","_processing$appId","ctx","rawSend","messages","isProcessing","$RefreshReg$"],"sources":["C:/Users/divc1/Downloads/demosb/sb-agentic-ai-security-agents/src/contexts/ChatContext.tsx"],"sourcesContent":["// src/contexts/ChatContext.tsx\r\nimport React, { createContext, useContext, useState, ReactNode } from 'react';\r\n\r\nexport interface Message {\r\n  id: number;\r\n  text: string;\r\n  sender: 'user' | 'bot';\r\n}\r\n\r\ninterface RawChatContextValue {\r\n  /// All conversations keyed by appId (\"1\", \"2\", \"3\", \"4\")\r\n  conversations: Record<string, Message[]>;\r\n  /// Whether a given appId is currently waiting for its bot reply\r\n  processing: Record<string, boolean>;\r\n  /// Send a new message for a specific appId\r\n  sendMessage: (appId: string, text: string) => Promise<void>;\r\n}\r\n\r\nconst ChatContext = createContext<RawChatContextValue | undefined>(undefined);\r\n\r\nexport const ChatProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\r\n  // conversations[\"1\"] = Message[] for /app1, conversations[\"2\"] = Message[] for /app2, etc.\r\n  const [conversations, setConversations] = useState<Record<string, Message[]>>({});\r\n  // processing[\"1\"] = true if /app1 is waiting for a reply, etc.\r\n  const [processing, setProcessing] = useState<Record<string, boolean>>({});\r\n\r\n  const sendMessage = async (appId: string, text: string) => {\r\n    // If that appId is already processing, do nothing\r\n    if (processing[appId]) return;\r\n\r\n    // 1. Append the user message onto that app's conversation\r\n    const userMsg: Message = {\r\n      id: Date.now(),\r\n      text: text.trim(),\r\n      sender: 'user',\r\n    };\r\n    setConversations(prev => {\r\n      const prevMsgs = prev[appId] ?? [];\r\n      return {\r\n        ...prev,\r\n        [appId]: [...prevMsgs, userMsg],\r\n      };\r\n    });\r\n\r\n    // 2. Mark that appId as processing\r\n    setProcessing(prev => ({\r\n      ...prev,\r\n      [appId]: true,\r\n    }));\r\n\r\n    // 3. Fire off the POST to /api/chat\r\n    try {\r\n      const response = await fetch('/api/chat', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ appId, message: text.trim() }),\r\n      });\r\n      if (!response.ok) {\r\n        throw new Error(`Server responded ${response.status}`);\r\n      }\r\n      const data = await response.json();\r\n      // assume backend returns { reply: string }\r\n      const botMsg: Message = {\r\n        id: Date.now() + 1,\r\n        text: data.reply || 'Error: Empty response',\r\n        sender: 'bot',\r\n      };\r\n      // Append botMsg onto that same conversation\r\n      setConversations(prev => {\r\n        const prevMsgs = prev[appId] ?? [];\r\n        return {\r\n          ...prev,\r\n          [appId]: [...prevMsgs, botMsg],\r\n        };\r\n      });\r\n    } catch (err) {\r\n      const errorMsg: Message = {\r\n        id: Date.now() + 2,\r\n        text: '⚠️ Sorry, something went wrong.',\r\n        sender: 'bot',\r\n      };\r\n      setConversations(prev => {\r\n        const prevMsgs = prev[appId] ?? [];\r\n        return {\r\n          ...prev,\r\n          [appId]: [...prevMsgs, errorMsg],\r\n        };\r\n      });\r\n      console.error('Chat fetch error for appId', appId, err);\r\n    } finally {\r\n      // 4. Clear processing for that appId\r\n      setProcessing(prev => ({\r\n        ...prev,\r\n        [appId]: false,\r\n      }));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ChatContext.Provider value={{ conversations, processing, sendMessage }}>\r\n      {children}\r\n    </ChatContext.Provider>\r\n  );\r\n};\r\n\r\n/**\r\n * useChat(appId) → { messages, isProcessing, sendMessage }\r\n *   • messages: Message[] for this appId (or [] if none yet)\r\n *   • isProcessing: boolean for this appId\r\n *   • sendMessage(text) internally calls context.sendMessage(appId, text)\r\n */\r\nexport const useChat = (appId: string) => {\r\n  const ctx = useContext(ChatContext);\r\n  if (!ctx) {\r\n    throw new Error('useChat must be used within a ChatProvider');\r\n  }\r\n  const { conversations, processing, sendMessage: rawSend } = ctx;\r\n\r\n  return {\r\n    messages: conversations[appId] ?? [],\r\n    isProcessing: processing[appId] ?? false,\r\n    sendMessage: (text: string) => rawSend(appId, text),\r\n  };\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}